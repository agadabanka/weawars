package  {	import flash.events.Event;	import flash.display.*;	import flash.geom.Point;	import MonsterTex;	import BlastTex;	import flash.utils.Timer;	import flash.events.TimerEvent;	import Monsters;		public class Creature extends Sprite{		private var vel:Number 	   = 2*20; 	//grid per sec, gridsize=20		private var health:Number  = 100;  //units		private var monster:Monsters;		private var startposx:Number, 					startposy:Number, 					endposx:Number	, 					endposy:Number	,					currentx:Number,					currenty:Number,					dir:int;		public  var	nm:String; //used for debugging the monster		private var wobbleTheta:Number = 0; //used to wobble the creature ( animation )		private var creatureSize:Number = 10;		private static const DEAD:int  = 0;		private static const ALIVE:int = 1;		private static const STORE:int = 2; 		private static const PASS:int  = 3;		public var creatureState:int = STORE;		private var blastTex:BlastTex;		private var creatureTex:MonsterTex;		private var blastTimer:Timer;		private var healthBar:HealthBar;				public function Creature( l_monster:Monsters,								  l_startposx:Number, l_startposy:Number, 								  l_endposx:Number	, l_endposy:Number	, 								  l_dir:int, l_nm:String ) {			monster   = l_monster;			startposx = l_startposx; startposy  = l_startposy;			endposx   = l_endposx;	 endposy	= l_endposy;			dir		  = l_dir; nm = l_nm;			healthBar = new HealthBar( health, creatureSize+5 );			healthBar.x = 0; healthBar.y = -8;						x  = startposx; y = startposy;			creatureTex		   = new MonsterTex( );			creatureTex.width  = creatureSize;			creatureTex.height = creatureSize;			addChild( creatureTex );			alpha	  = 0;		}				public function getPos( ):Point{			return new Point(x,y);		}				public function addToField( ){			creatureState = ALIVE;			addEventListener( Event.ENTER_FRAME, update, false, 0, true );		}				public function clearCreature( ){ //called on game over			removeEventListener( Event.ENTER_FRAME, update );			creatureState = STORE;					}				public function removeFromField( ){			creatureState = DEAD;			monster.game.player.updateMoney( +15 );					removeEventListener( Event.ENTER_FRAME, update );			removeChild( creatureTex ); //dont show the creature anymore, instead show it blasted			if( contains( healthBar ) )				removeChild( healthBar );			blastTex 		= new  BlastTex( );			blastTex.width  = creatureSize*2;			blastTex.height = creatureSize*2;			addChild( blastTex );			blastTimer		= new Timer( 500 );			blastTimer.addEventListener(TimerEvent.TIMER, removeCreature );			blastTimer.start( );		}				private function removeCreature( eve:TimerEvent ){			blastTimer.stop( );			blastTimer.removeEventListener(TimerEvent.TIMER, removeCreature );			removeChild( blastTex );			if( contains( healthBar ) )				removeChild( healthBar );			if( parent )				parent.removeChild( this );			--monster.num; //one more dead creature		}				public function doDamage( dam:Number ):Boolean{			if( creatureState == DEAD )				return true; //already shot dead by another tower			health -= dam;			if( !contains( healthBar ) )				addChild( healthBar );			healthBar.update( health );			if( health <= 0 ){				removeFromField( );				return true;	//dead is True			}			return false;		//still alive		}				private function update( eve:Event ){			if( dir ){ // 1 => moving in the x direction				if( x < endposx ){					if ( alpha < 1 )						alpha += 0.05;					x += vel/30.0;					y += Math.sin( wobbleTheta );					wobbleTheta += Math.PI/6;					if( wobbleTheta > 2*Math.PI )						wobbleTheta = 0;				}else{					removeEventListener( Event.ENTER_FRAME, update); //done with this creature					creatureState = PASS; 					monster.game.player.updateHealth( -1 );					alpha = 0;					--monster.num;				}			}else{				if( y < endposy ){					y += vel/30.0;					x += Math.sin( wobbleTheta );					wobbleTheta += Math.PI/6;					if( wobbleTheta > 2*Math.PI )						wobbleTheta = 0;					if ( alpha < 1 )						alpha += 0.05; 				}else{					removeEventListener( Event.ENTER_FRAME, update); //done with this creature					creatureState = PASS;					monster.game.player.updateHealth( -1 );					alpha = 0;					--monster.num;				}			}		}	}	}import flash.display.*;class HealthBar extends Sprite{	private var _barWidth:Number ;	private var _barHeight:Number = 5;	private var _maxHealth:Number;	private var hbar:Shape;	private var border:Number = 1;		public function HealthBar( maxHealth:Number, barWidth:Number ){		_maxHealth = maxHealth;		_barWidth  = barWidth;			hbar	   = new Shape( );		hbar.graphics.beginFill( 0x000000 );		hbar.graphics.drawRect( 0, 0, _barWidth, _barHeight );		hbar.graphics.endFill( );		hbar.graphics.beginFill( 0x00FF00 );		hbar.graphics.drawRect( border, border, _barWidth-2*border, _barHeight-2*border );		hbar.graphics.endFill( );		addChild( hbar );	}		public function update( health:Number ){		var barwidth:Number = (_maxHealth-health)/_maxHealth * (_barWidth-2*border);		hbar.graphics.beginFill( 0xFF0000 );		hbar.graphics.drawRect( border, border, barwidth, _barHeight-2*border );		hbar.graphics.endFill( );	}}