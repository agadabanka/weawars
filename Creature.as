package  {	import flash.events.Event;	import flash.display.*;	import flash.geom.Point;	import MonsterTex;	import BlastTex;	import flash.utils.Timer;	import flash.events.TimerEvent;	import Monsters;		public class Creature extends Sprite{		private var vel:Number 	   = 2*20; 	//grid per sec, gridsize=20		private var health:Number  = 100;  //units		private var monster:Monsters;		private var startposx:Number, 					startposy:Number, 					endposx:Number	, 					endposy:Number	,					currentx:Number,					currenty:Number,					dir:int,					nm:String; //used for debugging the monster		private var creatureSize:Number = 10;		private static const DEAD:int  = 0;		private static const ALIVE:int = 1;		private static const STORE:int = 2; 		public var creatureState:int = STORE;		private var blastTex:BlastTex;		private var creatureTex:MonsterTex;		private var blastTimer:Timer;				public function Creature( l_monster:Monsters,								  l_startposx:Number, l_startposy:Number, 								  l_endposx:Number	, l_endposy:Number	, 								  l_dir:int, l_nm:String ) {			monster   = l_monster;			startposx = l_startposx; startposy  = l_startposy;			endposx   = l_endposx;	 endposy	= l_endposy;			dir		  = l_dir; nm = l_nm;			x  = startposx; y = startposy;			creatureTex		   = new MonsterTex( );			creatureTex.width  = creatureSize;			creatureTex.height = creatureSize;			addChild( creatureTex );			alpha	  = 0;		}				public function getPos( ):Point{			return new Point(x,y);		}				public function addToField( ){			creatureState = ALIVE;			addEventListener( Event.ENTER_FRAME, update, false, 0, true );		}				public function removeFromField( ){			creatureState = DEAD;			monster.game.money += 15;			trace( 'got more money! - ' + monster.game.money );			removeEventListener( Event.ENTER_FRAME, update );			removeChild( creatureTex ); //dont show the creature anymore, instead show it blasted			blastTex 		= new  BlastTex( );			blastTex.width  = creatureSize*2;			blastTex.height = creatureSize*2;			addChild( blastTex );			blastTimer		= new Timer( 500 );			blastTimer.addEventListener(TimerEvent.TIMER, removeCreature );			blastTimer.start( );		}				private function removeCreature( eve:TimerEvent ){			blastTimer.stop( );			blastTimer.removeEventListener(TimerEvent.TIMER, removeCreature );			removeChild( blastTex );			parent.removeChild( this );		}				public function doDamage( dam:Number ):Boolean{			if( creatureState == DEAD )				return true; //already shot dead by another tower			health -= dam;			if( health <= 0 ){				removeFromField( );				return true;	//dead is True			}			return false;		//still alive		}				private function update( eve:Event ){			if( dir ){ // 1 => moving in the x direction				if( x < endposx ){					if ( alpha < 1 )						alpha += 0.05;					x += vel/30.0;				}else{					removeEventListener( Event.ENTER_FRAME, update); //done with this creature					alpha = 0;				}			}else{				if( y < endposy ){					y += vel/30.0;					if ( alpha < 1 )						alpha += 0.05; 				}else{					removeEventListener( Event.ENTER_FRAME, update); //done with this creature					alpha = 0;				}			}		}	}	}